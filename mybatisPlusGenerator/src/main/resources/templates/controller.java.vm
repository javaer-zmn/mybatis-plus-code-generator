package ${package.Controller};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import javax.servlet.http.HttpServletRequest;
import lombok.var;
import java.util.List;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity}DO;
import java.text.SimpleDateFormat;

/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("${entity}DO/")
#if(${swagger2})
@Api(value = "/${table.controllerName}", tags = "")
#end
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    @Autowired
    public ${table.serviceName} i${entity}DOService;

    @Autowired
    private HttpServletRequest request;

    // 用户信息对象，响应对象BoardMessage的最后一个参数，测试时不需要验证用户信息暂时给null值，放开此项同时相应的应该把每个接口中【验证用户信息的代码】删除，项目中可把此参数删除
    // private ModelAccountInfo tempVal = null;

    /**
     * 分页查询数据
     *
     * @param pageQuery  查询条件 Page,Row 为必要参数
     * @return BoardMessage
     */
    @PostMapping(value = "Get${entity}DOPageList")
    @ResponseBody
    #if(${swagger2})
    @ApiOperation(value = "获取分页列表", notes = "获取分页列表", response = BoardMessage.class)
    #end
    public BoardMessage Get${entity}DOPageList(@RequestBody PageQuery pageQuery) {

        // 验证用户信息
        var tempVal = TokenUse.verificationTokenInfo(request);
        if (tempVal == null) {
            return new BoardMessage(ErrorCode.getTokenId(), "Token无效，请重新登入", " Get${entity}DOPageList",null);
        }

        BoardMessage message;
        try {
            Page<${entity}DO> page = i${entity}DOService.select${entity}DOPage(pageQuery);
            return new BoardMessage(ErrorCode.getSuccess(),"",page," Get${entity}DOPageList", tempVal);
        } catch (Exception e) {
            message = new BoardMessage(ErrorCode.getException(),e.toString()," Get${entity}DOPageList", tempVal);
        }
        return message;
    }

    /**
    * 查询列表数据
    * @return BoardMessage
    */
    @GetMapping(value = "Get${entity}DOList")
    @ResponseBody
    @ApiOperation(value = "查询列表数据", notes = "查询列表数据", response = BoardMessage.class)
    public BoardMessage Get${entity}DOList() {

        // 验证用户信息
        var tempVal = TokenUse.verificationTokenInfo(request);
        if (tempVal == null) {
            return new BoardMessage(ErrorCode.getTokenId(), "Token无效，请重新登入", " Get${entity}DOList",null);
        }

        BoardMessage message;
        try {
            List<${entity}DO> list = i${entity}DOService.list();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            list.forEach(item->{
            item.setAddTimeStr(simpleDateFormat.format(item.getAddTime()));
            });
            return new BoardMessage(ErrorCode.getSuccess(),"",list," Get${entity}DOList", tempVal);
        } catch (Exception e) {
            message = new BoardMessage(ErrorCode.getException(),e.toString()," Get${entity}DOList", tempVal);
        }
        return message;
    }

    /**
     * 查询树列表
     * @return BoardMessage
     */
    @PostMapping(value = "Get${entity}DOTreeList")
    @ResponseBody
    @ApiOperation(value = "查询树列表", notes = "查询树列表", response = BoardMessage.class)
    public BoardMessage Get${entity}DOTreeList() {

        // 验证用户信息
        var tempVal = TokenUse.verificationTokenInfo(request);
        if (tempVal == null) {
        return new BoardMessage(ErrorCode.getTokenId(), "Token无效，请重新登入", " Get${entity}DOTreeList",null);
        }

        BoardMessage message;
        try {
        List<${entity}DO> list = i${entity}DOService.list();
        Map<Integer, List<${entity}DO>> mapByPid = list.stream().collect(Collectors.groupingBy(${entity}DO::getPId));
        list.forEach(department->{
        department.setChildren(mapByPid.get(department.getId()));
        });
        List<${entity}DO> collect = list.stream().filter(v -> v.getPId().equals(0)).collect(Collectors.toList());
        return new BoardMessage(ErrorCode.getSuccess(),"",collect," Get${entity}DOTreeList", tempVal);
        } catch (Exception e) {
        message = new BoardMessage(ErrorCode.getException(),e.toString()," Get${entity}DOTreeList", tempVal);
        }
        return message;
    }

    /**
     * 添加${entity}DO
     * @param vue${entity}DO 请求参数对象
     * @return BoardMessage
     */
    @PostMapping(value = "Insert${entity}DO")
    #if(${swagger2})
    @ApiOperation(value = "添加${entity}DO", notes = "添加${entity}DO", response = BoardMessage.class)
    #end
    @ResponseBody
    public BoardMessage Insert${entity}DO(@RequestBody Vue${entity}DO vue${entity}DO) {

        // 验证用户信息
        var tempVal = TokenUse.verificationTokenInfo(request);
        if (tempVal == null) {
            return new BoardMessage(ErrorCode.getTokenId(), "Token无效，请重新登入", tempVal);
        }

        BoardMessage message;
        try {
            if (i${entity}DOService.IsNameExists(vue${entity}DO.getName(), 0)) {
                message = new BoardMessage(ErrorCode.getFail(), "名称已存在", "Insert${entity}DO", tempVal);
                return message;
            }
            ${entity}DO demo${entity}DO = new ${entity}DO();
            // 此处为对象赋值(把第一个参数对象的属性值赋给第二个参数对象)
            BeanUtils.copyProperties(vue${entity}DO,demo${entity}DO);

            if (i${entity}DOService.save(demo${entity}DO)) {
                message = new BoardMessage(ErrorCode.getSuccess(), "", "Insert${entity}DO", tempVal);
            } else {
                message = new BoardMessage(ErrorCode.getFail(), "", "Insert${entity}DO", tempVal);
            }
        } catch (Exception e) {
            message = new BoardMessage(ErrorCode.getException(), e.toString(), "Insert${entity}DO", tempVal);
        }
        return message;
    }

    /**
     * 修改${entity}DO
     * @param vue${entity}DO 请求参数对象
     * @return BoardMessage
     */
    @PostMapping(value = "Update${entity}DO")
    @ApiOperation(value = "修改${entity}DO", notes = "修改${entity}DO", response = BoardMessage.class)
    @ResponseBody
    public BoardMessage Update${entity}DO(@RequestBody Vue${entity}DO vue${entity}DO) {

        // 验证用户信息
        var tempVal = TokenUse.verificationTokenInfo(request);
        if (tempVal == null) {
            return new BoardMessage(ErrorCode.getTokenId(), "Token无效，请重新登入", tempVal);
        }

        BoardMessage message;
        try {
            if (i${entity}DOService.IsNameExists(vue${entity}DO.getName(),vue${entity}DO.getId())) {
                message = new BoardMessage(ErrorCode.getFail(), "名称已存在", "Update${entity}DO", tempVal);
                return message;
            }
            ${entity}DO demo${entity}DO = new ${entity}DO();
            // 此处为对象赋值(把第一个参数对象的属性值赋给第二个参数对象)
            BeanUtils.copyProperties(vue${entity}DO,demo${entity}DO);

            if (i${entity}DOService.updateById(demo${entity}DO)) {
                message = new BoardMessage(ErrorCode.getSuccess(), "", "Update${entity}DO", tempVal);
            } else {
             message = new BoardMessage(ErrorCode.getFail(), "", "Update${entity}DO", tempVal);
            }
        } catch (Exception e) {
            message = new BoardMessage(ErrorCode.getException(), e.toString(), "Update${entity}DO", tempVal);
        }
        return message;
    }

    /**
     * 删除${entity}DO
     * @param id ${entity}DO主键
     * @return BoardMessage
     */
    @PostMapping(value = "Delete${entity}DO")
    @ApiOperation(value = "删除${entity}DO", notes = "删除${entity}DO", response = BoardMessage.class)
    @ResponseBody
    public BoardMessage Delete${entity}DO(@RequestParam("id") int id){

        // 验证用户信息
        var tempVal=TokenUse.verificationTokenInfo(request);
        if(tempVal==null){
            return new BoardMessage(ErrorCode.getTokenId(),"Token无效，请重新登入",tempVal);
        }

        BoardMessage message;
        try{
            if(i${entity}DOService.removeById(id)){
                return new BoardMessage(ErrorCode.getSuccess(),"Delete${entity}DO",tempVal);
            }else{
                return new BoardMessage(ErrorCode.getFail(),"Delete${entity}DO",tempVal);
            }
        }catch(Exception e){
            message=new BoardMessage(ErrorCode.getException(),e.toString(),"Delete${entity}DO",tempVal);
        }
        return message;
    }

    /**
     * 启用/禁用${entity}DO
     * @param vue${entity}DO 请求参数对象 IsEnable,Id 为必要参数
     * @return  BoardMessage
     */
    @PostMapping(value = "Enable${entity}DO")
    @ApiOperation(value = " 启用/禁用${entity}DO", notes = "启用/禁用${entity}DO", response = BoardMessage.class)
    @ResponseBody
    public BoardMessage Enable${entity}DO(@RequestBody Vue${entity}DO vue${entity}DO) {

        // 验证用户信息
        var tempVal = TokenUse.verificationTokenInfo(request);
        if (tempVal == null) {
            return new BoardMessage(ErrorCode.getTokenId(), "Token无效，请重新登入", tempVal);
        }

        BoardMessage message;
        try {
            ${entity}DO demo${entity}DO = new ${entity}DO();
            demo${entity}DO.setIsEnable(vue${entity}DO.getIsEnable());
            demo${entity}DO.setId(vue${entity}DO.getId());

            if (i${entity}DOService.updateById(demo${entity}DO)) {
                message = new BoardMessage(ErrorCode.getSuccess(), "", "Enable${entity}DO", tempVal);
            } else {
                message = new BoardMessage(ErrorCode.getFail(), "", "Enable${entity}DO", tempVal);
            }
        } catch (Exception e) {
            message = new BoardMessage(ErrorCode.getException(), e.toString(), "Enable${entity}DO", tempVal);
        }
        return message;
    }

}
